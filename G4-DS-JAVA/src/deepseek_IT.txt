```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import javax.sql.DataSource;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;

class ComponentIntegrationTest {
    
    private DataSource dataSource;
    private ComponentA componentA;
    private ComponentB componentB;
    private JdbcTemplate jdbcTemplate;

    @BeforeEach
    void setup() {
        dataSource = new EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.H2)
            .addScript("classpath:schema.sql") // Creates users table
            .addScript("classpath:test-data.sql") // Inserts test user (id: 1)
            .build();
        
        componentA = new ComponentA(dataSource);
        componentB = new ComponentB(dataSource);
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Test
    void updateEmailAndRetrieve_ValidData_UpdatesPersisted() {
        // Arrange
        int userId = 1;
        String newEmail = "updated@example.com";

        // Act
        componentA.updateUserEmail(userId, newEmail);
        Map<String, Object> user = componentB.getUserById(userId);

        // Assert
        assertEquals(newEmail, user.get("EMAIL"));
    }

    @Test
    void updateNonExistentUser_NoRowUpdated() {
        // Act & Assert (update completes without exception)
        componentA.updateUserEmail(999, "ghost@example.com");
        
        // Verify no user exists with ID 999
        assertThrows(org.springframework.dao.EmptyResultDataAccessException.class,
            () -> componentB.getUserById(999)
        );
    }

    @Test
    void updateWithInvalidEmail_ThrowsConstraintViolation() {
        // Act & Assert
        assertThrows(org.springframework.dao.DataIntegrityViolationException.class,
            () -> componentA.updateUserEmail(1, null) // Assuming email column has NOT NULL constraint
        );
    }

    @Test
    void retrieveInvalidUserId_ThrowsException() {
        assertThrows(org.springframework.dao.EmptyResultDataAccessException.class,
            () -> componentB.getUserById(999)
        );
    }
}
```