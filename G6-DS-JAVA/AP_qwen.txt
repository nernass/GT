import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

class IntegrationTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private ComponentA componentA;

    @InjectMocks
    private ComponentB componentB;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testIntegrationSuccess() throws IOException {
        // Arrange
        String sourceDir = "source";
        String backupDir = "backup";
        String restoreDir = "restore";
        String fileName = "file.txt";
        Path sourcePath = Paths.get(sourceDir, fileName);
        Path backupPath = Paths.get(backupDir, fileName);
        Path restorePath = Paths.get(restoreDir, fileName);

        Files.createDirectories(Paths.get(sourceDir));
        Files.createFile(sourcePath);

        when(jdbcTemplate.update(anyString(), anyObject())).thenReturn(1);
        when(jdbcTemplate.queryForList(anyString(), anyObject())).thenReturn(List.of(Map.of("name", fileName)));

        // Act
        componentA.backupDirectory(sourceDir, backupDir);
        componentB.restoreBackup(backupDir, restoreDir);
        boolean isVerified = componentB.verifyRestore(sourceDir, restoreDir);

        // Assert
        assertTrue(isVerified);
        verify(jdbcTemplate).update(anyString(), eq(fileName));
        verify(jdbcTemplate).queryForList(anyString(), eq(fileName));
    }

    @Test
    void testIntegrationFailure() throws IOException {
        // Arrange
        String sourceDir = "source";
        String backupDir = "backup";
        String restoreDir = "restore";
        String fileName = "file.txt";
        Path sourcePath = Paths.get(sourceDir, fileName);
        Path backupPath = Paths.get(backupDir, fileName);
        Path restorePath = Paths.get(restoreDir, fileName);

        Files.createDirectories(Paths.get(sourceDir));
        Files.createFile(sourcePath);

        when(jdbcTemplate.update(anyString(), anyObject())).thenThrow(new IOException("Database error"));
        when(jdbcTemplate.queryForList(anyString(), anyObject())).thenReturn(List.of(Map.of("name", fileName)));

        // Act & Assert
        Exception exception = assertThrows(IOException.class, () -> {
            componentA.backupDirectory(sourceDir, backupDir);
        });
        assertEquals("Database error", exception.getMessage());

        Exception restoreException = assertThrows(IOException.class, () -> {
            componentB.restoreBackup(backupDir, restoreDir);
        });
        assertEquals("Database error", restoreException.getMessage());

        boolean isVerified = componentB.verifyRestore(sourceDir, restoreDir);
        assertFalse(isVerified);
        verify(jdbcTemplate).update(anyString(), eq(fileName));
        verify(jdbcTemplate).queryForList(anyString(), eq(fileName));
    }

    @Test
    void testIntegrationEdgeCase() throws IOException {
        // Arrange
        String sourceDir = "source";
        String backupDir = "backup";
        String restoreDir = "restore";

        when(jdbcTemplate.update(anyString(), anyObject())).thenReturn(1);
        when(jdbcTemplate.queryForList(anyString(), anyObject())).thenReturn(List.of());

        // Act & Assert
        Exception exception = assertThrows(IOException.class, () -> {
            componentA.backupDirectory(sourceDir, backupDir);
        });
        assertEquals("No files to backup", exception.getMessage());

        Exception restoreException = assertThrows(IOException.class, () -> {
            componentB.restoreBackup(backupDir, restoreDir);
        });
        assertEquals("No files to restore", restoreException.getMessage());

        boolean isVerified = componentB.verifyRestore(sourceDir, restoreDir);
        assertFalse(isVerified);
        verify(jdbcTemplate).update(anyString(), anyObject());
        verify(jdbcTemplate).queryForList(anyString(), anyObject());
    }
}