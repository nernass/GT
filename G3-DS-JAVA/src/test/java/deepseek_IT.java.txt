```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import javax.sql.DataSource;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;

class ComponentIntegrationTest {
    
    private DataSource dataSource;
    private ComponentA componentA;
    private ComponentB componentB;

    @BeforeEach
    void setup() {
        dataSource = new EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.H2)
            .addScript("classpath:schema.sql") // Assumes schema.sql creates users table
            .build();
        
        componentA = new ComponentA(dataSource);
        componentB = new ComponentB(dataSource);
    }

    @Test
    void insertAndRetrieveUser_ValidData_ReturnsCorrectUser() {
        // Arrange
        String name = "John Doe";
        String email = "john@example.com";

        // Act
        componentA.insertUser(name, email);
        Map<String, Object> user = componentB.getUserByEmail(email);

        // Assert
        assertEquals(name, user.get("NAME"));
        assertEquals(email, user.get("EMAIL"));
    }

    @Test
    void retrieveNonExistentUser_ThrowsException() {
        // Act & Assert
        assertThrows(org.springframework.dao.EmptyResultDataAccessException.class,
            () -> componentB.getUserByEmail("invalid@example.com")
        );
    }

    @Test
    void insertInvalidData_ThrowsDataIntegrityViolation() {
        // Act & Assert
        assertThrows(org.springframework.dao.DataIntegrityViolationException.class,
            () -> componentA.insertUser(null, "invalid@example.com") // Assumes name is NOT NULL
        );
    }
}
```