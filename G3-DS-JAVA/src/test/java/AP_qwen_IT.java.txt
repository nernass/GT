```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;

import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;

class IntegrationTest {

    @Mock
    private DataSource dataSource;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private ComponentA componentA;

    @InjectMocks
    private ComponentB componentB;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(dataSource.getConnection()).thenReturn(null); // Mock connection
        when(new JdbcTemplate(dataSource)).thenReturn(jdbcTemplate);
    }

    @Test
    void testIntegrationSuccess() {
        // Arrange
        String name = "John Doe";
        String email = "john.doe@example.com";
        Map<String, Object> expectedUser = new HashMap<>();
        expectedUser.put("name", name);
        expectedUser.put("email", email);

        when(jdbcTemplate.queryForMap(anyString(), anyObject())).thenReturn(expectedUser);

        // Act
        componentA.insertUser(name, email);
        Map<String, Object> resultUser = componentB.getUserByEmail(email);

        // Assert
        assertEquals(expectedUser, resultUser);
        verify(jdbcTemplate).update(anyString(), eq(name), eq(email));
        verify(jdbcTemplate).queryForMap(anyString(), eq(email));
    }

    @Test
    void testIntegrationFailure() {
        // Arrange
        String name = "John Doe";
        String email = "john.doe@example.com";

        when(jdbcTemplate.queryForMap(anyString(), anyObject())).thenThrow(new RuntimeException("Database error"));

        // Act & Assert
        componentA.insertUser(name, email);
        Exception exception = assertThrows(RuntimeException.class, () -> {
            componentB.getUserByEmail(email);
        });
        assertEquals("Database error", exception.getMessage());
        verify(jdbcTemplate).update(anyString(), eq(name), eq(email));
        verify(jdbcTemplate).queryForMap(anyString(), eq(email));
    }

    @Test
    void testIntegrationEdgeCase() {
        // Arrange
        String name = "";
        String email = "";

        // Act & Assert
        assertThrows(RuntimeException.class, () -> {
            componentA.insertUser(name, email);
        });
        Exception exception = assertThrows(RuntimeException.class, () -> {
            componentB.getUserByEmail(email);
        });
        verify(jdbcTemplate, never()).update(anyString(), eq(name), eq(email));
        verify(jdbcTemplate, never()).queryForMap(anyString(), eq(email));
    }
}
```