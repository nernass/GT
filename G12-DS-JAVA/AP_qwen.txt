import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

class IntegrationTest {

    @Spy
    private ComponentA componentA;

    @Spy
    private ComponentB componentB;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testIntegrationSuccess() throws IOException {
        // Arrange
        String sourceFile = "test_file.txt";
        String zipFile = "test_archive.zip";
        String outputDir = "extracted_files";
        String extractedFile = outputDir + "/test_file.txt";

        // Create test input file
        try (FileWriter writer = new FileWriter(sourceFile)) {
            writer.write("Hello, World!");
        }

        // Act
        componentA.compressFile(sourceFile, zipFile);
        componentB.extractZipFile(zipFile, outputDir);
        boolean isVerified = componentB.verifyExtractedFile(sourceFile, extractedFile);

        // Assert
        assertTrue(isVerified);
        verify(componentA).compressFile(sourceFile, zipFile);
        verify(componentB).extractZipFile(zipFile, outputDir);
        verify(componentB).verifyExtractedFile(sourceFile, extractedFile);
    }

    @Test
    void testIntegrationFailure() throws IOException {
        // Arrange
        String sourceFile = "test_file.txt";
        String zipFile = "test_archive.zip";
        String outputDir = "extracted_files";
        String extractedFile = outputDir + "/test_file.txt";

        // Create test input file
        try (FileWriter writer = new FileWriter(sourceFile)) {
            writer.write("Hello, World!");
        }

        // Mock ComponentB to throw an exception during extraction
        doThrow(new IOException("Extraction Error")).when(componentB).extractZipFile(zipFile, outputDir);

        // Act & Assert
        componentA.compressFile(sourceFile, zipFile);
        Exception extractException = assertThrows(IOException.class, () -> {
            componentB.extractZipFile(zipFile, outputDir);
        });
        assertEquals("Extraction Error", extractException.getMessage());

        boolean isVerified = componentB.verifyExtractedFile(sourceFile, extractedFile);
        assertFalse(isVerified);
        verify(componentA).compressFile(sourceFile, zipFile);
        verify(componentB).extractZipFile(zipFile, outputDir);
        verify(componentB).verifyExtractedFile(sourceFile, extractedFile);
    }

    @Test
    void testIntegrationEdgeCase() throws IOException {
        // Arrange
        String sourceFile = "test_empty_file.txt";
        String zipFile = "test_empty_archive.zip";
        String outputDir = "extracted_files";
        String extractedFile = outputDir + "/test_empty_file.txt";

        // Create empty test input file
        try (FileWriter writer = new FileWriter(sourceFile)) {
            writer.write("");
        }

        // Act
        componentA.compressFile(sourceFile, zipFile);
        componentB.extractZipFile(zipFile, outputDir);
        boolean isVerified = componentB.verifyExtractedFile(sourceFile, extractedFile);

        // Assert
        assertTrue(isVerified);
        verify(componentA).compressFile(sourceFile, zipFile);
        verify(componentB).extractZipFile(zipFile, outputDir);
        verify(componentB).verifyExtractedFile(sourceFile, extractedFile);
    }
}