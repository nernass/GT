import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import javax.sql.DataSource;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

class ComponentIntegrationTest {

    private ComponentA componentA;
    private ComponentB componentB;
    private DataSource dataSource;

    @BeforeEach
    void setup() {
        dataSource = new EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.H2)
            .addScript("CREATE TABLE sales (product VARCHAR(255), quantity INT, price DECIMAL(10,2))")
            .addScript("INSERT INTO sales VALUES ('Laptop', 5, 999.99), ('Phone', 10, 699.99)")
            .build();
        componentA = new ComponentA(dataSource);
        componentB = new ComponentB();
    }

    @Test
    void successFlow_GenerateAndSaveReport() throws IOException {
        String report = componentA.generateReport();
        Path reportFile = Files.createTempFile("report", ".txt");
        componentB.saveReportToFile(report, reportFile.toString());
        
        assertTrue(componentB.verifyReportContent(reportFile.toString(), report));
    }

    @Test
    void saveToInvalidPath_ThrowsException() {
        String report = componentA.generateReport();
        assertThrows(IOException.class, () -> 
            componentB.saveReportToFile(report, "/invalid/path/report.txt")
        );
    }

    @Test
    void emptySalesData_HandledCorrectly() throws IOException {
        // Re-initialize database with empty table
        DataSource emptyDataSource = new EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.H2)
            .addScript("CREATE TABLE sales (product VARCHAR(255), quantity INT, price DECIMAL(10,2))")
            .build();
        new JdbcTemplate(emptyDataSource).execute("DELETE FROM sales");
        
        ComponentA emptyComponentA = new ComponentA(emptyDataSource);
        String emptyReport = emptyComponentA.generateReport();
        
        Path reportFile = Files.createTempFile("empty_report", ".txt");
        componentB.saveReportToFile(emptyReport, reportFile.toString());
        
        String expectedReport = 
            "Sales Report:\n" +
            "---------------------------------\n" +
            "---------------------------------\n";
        assertTrue(componentB.verifyReportContent(reportFile.toString(), expectedReport));
    }
}