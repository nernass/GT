
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class IntegrationTest {

    private ComponentA componentA;
    private ComponentB componentB;

    @BeforeEach
    void setUp() {
        componentA = new ComponentA();
        componentB = new ComponentB();
    }

    @Test
    void testIntegrationComponentAAndComponentB() {
        // Original document content and target format
        String documentContent = "This is a sample document.";
        String targetFormat = "Word";

        // Expected converted content
        String expectedContent = "Converted to Word: This is a sample document.";

        // Convert document using ComponentA
        String convertedContent = componentA.convertDocument(documentContent, targetFormat);

        // Verify the converted content using ComponentB
        boolean isVerified = componentB.verifyDocumentContent(convertedContent, expectedContent);

        // Validate that the converted content matches the expected content
        assertTrue(isVerified);
    }

    @Test
    void testNullDocumentContentComponentA() {
        // Null document content
        String documentContent = null;
        String targetFormat = "Word";

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            componentA.convertDocument(documentContent, targetFormat);
        });

        assertEquals("Document content and target format must not be null.", exception.getMessage());
    }

    @Test
    void testNullTargetFormatComponentA() {
        // Null target format
        String documentContent = "This is a sample document.";
        String targetFormat = null;

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            componentA.convertDocument(documentContent, targetFormat);
        });

        assertEquals("Document content and target format must not be null.", exception.getMessage());
    }

    @Test
    void testBothNullComponentA() {
        // Both document content and target format are null
        String documentContent = null;
        String targetFormat = null;

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            componentA.convertDocument(documentContent, targetFormat);
        });

        assertEquals("Document content and target format must not be null.", exception.getMessage());
    }

    @Test
    void testNullConvertedContentComponentB() {
        // Null converted content
        String convertedContent = null;
        String expectedContent = "Converted to Word: This is a sample document.";

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            componentB.verifyDocumentContent(convertedContent, expectedContent);
        });

        assertEquals("Converted content and expected content must not be null.", exception.getMessage());
    }

    @Test
    void testNullExpectedContentComponentB() {
        // Null expected content
        String convertedContent = "Converted to Word: This is a sample document.";
        String expectedContent = null;

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            componentB.verifyDocumentContent(convertedContent, expectedContent);
        });

        assertEquals("Converted content and expected content must not be null.", exception.getMessage());
    }

    @Test
    void testBothNullComponentB() {
        // Both converted content and expected content are null
        String convertedContent = null;
        String expectedContent = null;

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            componentB.verifyDocumentContent(convertedContent, expectedContent);
        });

        assertEquals("Converted content and expected content must not be null.", exception.getMessage());
    }

    @Test
    void testMismatchedContentComponentB() {
        // Mismatched converted content and expected content
        String convertedContent = "Converted to Word: This is a sample document.";
        String expectedContent = "Converted to Word: This is a different document.";

        // Verify the converted content using ComponentB
        boolean isVerified = componentB.verifyDocumentContent(convertedContent, expectedContent);

        // Validate that the converted content does not match the expected content
        assertFalse(isVerified);
    }
}
